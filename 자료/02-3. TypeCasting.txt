Type Casting Type Conversion 형변환
=> 서로 다른 표현법을 가진 데이터 형이 하나의 연산에서 섞여서 연산되는 경우
    연산이 가능하도록 하기 위하여 한 데이터 형의 표현 법을 연산 시점에 잠시 동안 다른 데이터 형의 표현법으로 바꾸는 기능 또는 현상.


형변환은 묵시적(implicit) 형변환과 명시적(explicit) 형변환으로 분류할 수 있다.
=> 묵시적 형변환은 형변환의 방향성을 프로그래머가 지시하지 않아도 컴퓨터 프로그래밍 언어의 내부 규칙에 의해 변환 되는 규칙을 의미한다.
=> 명시적 형변환은 형변환의 방향성을 형변환 연산자를 통해 프로그래머가 지시하는 형변환이다.
=> 형변환 연산자는 (type)값  의 형태로 값을 type 형태로 형변환하도록 지시한다.
=> 두 변환 모두 올림변환(promotion)과 내림변환(demotion)이 가능하지만 묵시적 형변환은 주로 올림 변환을, 명시적 형변환은 주로 내림 변환을 사용한다.
변환 과정에서 충돌 시 표현 능력이 우선됨 long -> float
=> 올림 변환은 데이터 형의 비트 수, 표현 능력등이 낮은 데이터 형이 높은 형으로 변환 되는 것을 의미한다.
=> 내림 변환은 데이터 형의 비트 수, 표현 능력등이 높은 데이터 형이 낮은 형으로 변환 되는 것을 의미한다.
=> 8대 기본 자료형 중 boolean 형을 제외한 7개 데이터 형은 상호간에 묵시적 또는 명시적으로 형변환이 가능함.

ex 1) System.out.println( 3+3.5 );
 => 3.0+3.5 로 int형 정수 값이 double 형 실수값으로 형변환 되는 묵시적 형변환의 올림 변환이 수행됨.

ex 2) int a; a=3.5; 
 => 정수형 변수 a에 실수형 값 3.5가 대입되려면 3.5 가 3으로 값이 변환되어야 하는 내림 변환이 수행되어야 하지만 연산 오차가 커지는 위험한 연산으로 수행이 불가능함.

ex 3) int a; a=(int)3.5;
 => 정수형 변수 a에 실수형 값 3.5가 대입되려면 3.5 가 3으로 값이 변환되어야 하는 내림 변환으로 원래 불가능한 연산이지만 형변환 연산자를 사용하여 형변환을 프로그래머가 지정함.
(int) 부분을 cast라 함
8대 primitive data type 중 bool 빼고 캐스팅 가능

ex 4) char x='A'; System.out.println(x); System.out.println(x+1); System.out.println( (char)(x+1) );
 => 결과를 예측해보고 자바 예제 30번 풀이 해보기

ex 5) => 39-42번 중 39번 또는 40번 풀이 해보고 나머지는 연습

///*
		int i, j;

		for(i=1;i<=4;i=i+1)
		{
			for(j=i;j<=4;j=j+1) System.out.print("@");
			for(j=1;j<=2*i-1;j=j+1) System.out.print("*");
			for(j=i;j<=4;j=j+1) System.out.print("@");
			System.out.println();
		}
		//*/

/*
		int i, j;

		for(i=1;i<=4;i=i+1)
		{
			for(j=i;j<=4;j=j+1) System.out.print("@");
			for(j=1;j<=2*i-1;j=j+1) System.out.print((char)('A'+j-1));
			for(j=i;j<=4;j=j+1) System.out.print("@");
			System.out.println();
		}
		//*/

		/* 38. 1-3+5-7+9-11 … n의 결과는 얼마인지 출력하시오.
		// 	40. 1/1-1/3+1/5-1/7 … 1/n의 결과는 얼마인지 출력하시오.
		int i, n, sum;
		n=563;
		sum=0;

		for(i=1;i<=n;i=i+1)
		{
			if(i%2==1)
			{
				if(i%4==1) sum=sum + i;
				else sum=sum - i;
			}
		}
		System.out.println(sum);
		//*/